# -*- coding: utf-8 -*-
"""Dual_Input_HSN_Validator_NB.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JwXpNVPMneW3J34h6oesJ1JndVyeUM3-

# Dual-Input HSN Code Validator (LSTM + CNN)
This notebook implements a dual‐input neural network using TensorFlow/Keras that:

Feeds the HSN code (character‐level) into a bidirectional LSTM to learn valid patterns and catch subtle typos

Processes the product description (word‐level) through a 1D-CNN over pretrained embeddings to extract key semantic cues

Merges both feature streams and performs:

Format validation beyond simple regex rules

Existence checks against our master HSN database

Optional hierarchy enforcement to ensure chapter, heading, and subheading align correctly
"""

# Necessary Libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Embedding, LSTM, Dense, Dropout, Conv1D, GlobalMaxPooling1D, concatenate
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

from google.colab import drive #mounting to drive
drive.mount('/content/drive')

file_path = "/content/drive/MyDrive/HSN_SAC.xlsx"
sd = pd.read_excel(file_path)
sd.columns = ['HSN_Code', 'Description']
sd.dropna(inplace=True)
sd['HSN_Code'] = sd['HSN_Code'].astype(str)
sd.head() #Reading the first few lines of dataset provided

# Tokenizer for HSN code (character-level)
code_tokenizer = Tokenizer(char_level=True)
code_tokenizer.fit_on_texts(sd['HSN_Code'])
X_code = code_tokenizer.texts_to_sequences(sd['HSN_Code'])
X_code = pad_sequences(X_code, padding='post')

# Tokenizer for description (word-level)
desc_tokenizer = Tokenizer()
desc_tokenizer.fit_on_texts(sd['Description'])
X_desc = desc_tokenizer.texts_to_sequences(sd['Description'])
X_desc = pad_sequences(X_desc, padding='post')

# Encoding HSN codes as class labels
label_encoder = LabelEncoder()
y = label_encoder.fit_transform(sd['HSN_Code'])

# Splitting the dataset
Xc_train, Xc_test, Xd_train, Xd_test, y_train, y_test = train_test_split(
    X_code, X_desc, y, test_size=0.2, random_state=42
)

code_input = Input(shape=(X_code.shape[1],), name="hsn_code_input")
code_embed = Embedding(input_dim=len(code_tokenizer.word_index)+1, output_dim=16)(code_input)
code_lstm = LSTM(64)(code_embed)

desc_input = Input(shape=(X_desc.shape[1],), name="description_input")
desc_embed = Embedding(input_dim=len(desc_tokenizer.word_index)+1, output_dim=100)(desc_input)
desc_conv = Conv1D(128, kernel_size=5, activation='relu')(desc_embed)
desc_pool = GlobalMaxPooling1D()(desc_conv)

merged = concatenate([code_lstm, desc_pool])
dense = Dense(64, activation='relu')(merged)
output = Dense(len(np.unique(y)), activation='softmax')(dense)

model = Model(inputs=[code_input, desc_input], outputs=output)
model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.summary()

history = model.fit(
    [Xc_train, Xd_train], y_train,
    epochs=10, batch_size=32,
    validation_data=([Xc_test, Xd_test], y_test)
)

def validate_hsn_code(code, description, sd, model, code_tokenizer, desc_tokenizer, label_encoder):
    # Format check
    if not code.isdigit() or not (6 <= len(code) <= 8):
        return {
            "code": code,
            "status": "Invalid",
            "reason": "Invalid format. HSN codes must be 6–8 digits."
        }

    # Preparing the inputs
    seq_code = pad_sequences(code_tokenizer.texts_to_sequences([code]), maxlen=X_code.shape[1], padding='post')
    seq_desc = pad_sequences(desc_tokenizer.texts_to_sequences([description]), maxlen=X_desc.shape[1], padding='post')

    # Predicting
    pred = model.predict([seq_code, seq_desc])
    pred_code = label_encoder.inverse_transform([np.argmax(pred)])[0]
    confidence = float(np.max(pred))

    # Validating against master
    if code in sd['HSN_Code'].values:
        matched_desc = sd.loc[sd['HSN_Code'] == code, 'Description'].values[0]
        return {
            "code": code,
            "status": "Valid",
            "description": matched_desc,
            "confidence": round(confidence, 4)
        }
    else:
        # Checking the hierarchy
        hierarchy = [code[:i] for i in range(len(code)-1, 1, -1)]
        existing = [h for h in hierarchy if h in sd['HSN_Code'].values]
        return {
            "code": code,
            "status": "Invalid",
            "reason": "Code not found in the master dataset.",
            "hierarchy_match": existing,
            "suggested_code": pred_code,
            "confidence": round(confidence, 4)
        }

# Example of validations
examples = [
    ("01011010", "SWORsdISH (XIPHIAS GLADIUS)"),
    ("03049999", "SHARK"),
    ("ABC123", "INVALID ENTRY"),
    ("03046100", "TILAPIAS (OREOCHROMIS SPP.)"),
    ("12345678", "CATFISH"),
]

for code, desc in examples:
    result = validate_hsn_code(code, desc, sd, model, code_tokenizer, desc_tokenizer, label_encoder)
    print(f"\nHSN Code: {code}")
    for k, v in result.items():
        print(f"  {k}: {v}")